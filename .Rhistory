# non white
HIST.non_white <- master %>%
ggplot(mapping = aes(x = non_white)) +
geom_histogram(bins = 10) + labs(x="% non White", y="Count", title="Distribution of % non White")
# income
HIST.Income <- master %>%
ggplot(mapping = aes(x = Income)) +
geom_histogram() + labs(x="Income", y="Frequency", title="Distribution of Income")
# income per cap
HIST.IncomePerCap <- master1 %>%
ggplot(mapping = aes(x = IncomePerCap)) +
geom_histogram(bins = 10) + labs(x="Income Per Capita", y="Count", title="Distribution of Income Per Capita")
# poverty
HIST.Poverty <- master %>%
ggplot(mapping = aes(x = Poverty)) +
geom_histogram() + labs(x="Poverty", y="Frequency", title="Distribution of Poverty")
# drive
HIST.Drive <- master %>%
ggplot(mapping = aes(x = Drive)) +
geom_histogram() + labs(x="Percent Who Drive", y="Frequency", title="Distribution of Percentage of People Who Drive")
# non drive
HIST.non_drive <- master %>%
ggplot(mapping = aes(x = non_drive)) +
geom_histogram() + labs(x="Percent Who Are Non Drivers", y="Frequency", title="Distribution of Percentage of Non Drivers")
# carpool
HIST.Carpool <- master %>%
ggplot(mapping = aes(x = Carpool)) +
geom_histogram() + labs(x="Percent Who Carpool", y="Frequency", title="Distribution of Percentage Who Carpool")
# non carpool
HIST.non_carpool <- master %>%
ggplot(mapping = aes(x = non_carpool)) +
geom_histogram() + labs(x="Percent Who Don't Carpool", y="Frequency", title="Distribution of Percentage of People Who Don't Carpool")
# work at home
HIST.WorkAtHome <- master1 %>%
ggplot(mapping = aes(x = WorkAtHome)) +
geom_histogram(bins = 10) + labs(x="% Working from Home", y="Count", title="Distribution of % Working from Home")
#### scatterplots ####
SCAT.IncomePerCap.deaths <- master1 %>%
ggplot(mapping = aes(x = IncomePerCap,
y = deathsPer10000)) +
geom_point() + labs(x="Income Per Capita", y="Deaths per 10,000", title="Income per Capita vs. Deaths per 10,000") + geom_smooth(method = lm, se = FALSE)
SCAT.Poverty.deaths <- master1 %>%
ggplot(mapping = aes(x = Poverty,
y = deathsPer10000,
color = TotalPop)) +
geom_point() + labs(x="Percent in Poverty", y="Deaths(per 100000)", title="Deaths Per 100000 based on Percent in Poverty")
SCAT.UnemploymentRate.deaths <- master1 %>%
ggplot(mapping = aes(x = Unemployment_rate_2021,
y = deathsPer10000,
color = TotalPop)) +
geom_point() + labs(x="Unemployment Rate", y="Deaths(per 100000)", title="Deaths Per 100000 based on Unemployment Rate")
SCAT.WorkAtHome.deaths <- master1 %>%
ggplot(mapping = aes(x = WorkAtHome,
y = deathsPer10000)) +
geom_point() + labs(x="% Working frome Home", y="Deaths per 10,000", title="% Working frome Home vs. Deaths per 10,000") +
geom_smooth(method = lm, se = FALSE)
SCAT.nonwhite.deaths <- master1 %>%
ggplot(mapping = aes(x = non_white,
y = deathsPer10000)) +
geom_point() + labs(x="% non White", y="Deaths per 10,000", title="% non White vs. Deaths per 10,000") + geom_smooth(method = lm, se = FALSE)
grid.arrange(HIST.Income, HIST.non_white, HIST.WorkAtHome)
grid.arrange(SCAT.IncomePerCap.deaths, SCAT.Poverty.deaths, SCAT.UnemploymentRate.deaths, SCAT.WorkAtHome.deaths)
#Regression comparing noteable variables to deathsPer10000
#Good model
IncomePerCap.deaths.model <- lm(deathsPer10000 ~ IncomePerCap, master1)
Income.deaths <- lm(deathsPer10000 ~ Income, master1)
Poverty.deaths <- lm(deathsPer10000 ~ Poverty, master1)
Unemployment.deaths <- lm(deathsPer10000 ~ Unemployment_rate_2021, master1)
#Good model
WorkAtHome.deaths <- lm(deathsPer10000 ~ WorkAtHome, master1)
Carpool.deaths <- lm(deathsPer10000 ~ Carpool, master1)
#Good model
NonWhite.deaths <- lm(deathsPer10000 ~ non_white, master1)
Pop.deaths <- lm(deathsPer10000 ~ TotalPop, master1)
#Printed summaries of regression analyses
summary(IncomePerCap.deaths.model)
summary(Income.deaths)
summary(Poverty.deaths)
summary(Unemployment.deaths)
summary(WorkAtHome.deaths)
summary(Carpool.deaths)
summary(NonWhite.deaths)
summary(Pop.deaths)
#### multiple reg ####
multiple_regression <- lm(deathsPer10000 ~ non_white, master1)
multiple_regression <- lm(deathsPer10000 ~ non_white * WorkAtHome, master1)
multiple_regression <- lm(deathsPer10000 ~ non_white * WorkAtHome * IncomePerCap, master1)
summary(multiple_regression)
resAnal <- ggplot(mapping = aes(x = multiple_regression$fitted.values, y = multiple_regression$residuals)) +
geom_point() +
labs(title = "Residuals vs. Fitted Values (Interaction Model, 3 Predictors)",
x = 'Fitted Values',
y = 'Residuals')
plot_usmap("counties", data=master1, include = c("WY"), labels = TRUE, label_color = "white", values="IncomePerCap") +
scale_fill_continuous(name = "Income Per Capita", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "Wyoming", subtitle = "Wyoming Income Per Capita by County", values="values")
plot_usmap("counties", data=master1, include = c("WY"), labels = TRUE, label_color = "white", values="WorkAtHome") +
scale_fill_continuous(name = "Pct Work from Home", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "Wyoming", subtitle = "% Working from Home", values="values")
plot_usmap("counties", data=master1, include = c("WY"), labels = TRUE, label_color = "white", values="non_white") +
scale_fill_continuous(name = "% non White", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "Wyoming", subtitle = "Percentage Non White in Wyoming by County", values="values")
spam <- plot_usmap("counties", data=master1, include = c("WY"), labels = TRUE, label_color = "white", values="deathsPer10000") +
scale_fill_continuous(name = "Deaths per 10,000", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "Wyoming", subtitle = "Deaths per 10,000 in Wyoming by County", values="values")
#### bootstrap ####
NationalParksClosed <- master %>% filter(between(date, as.Date("2020-04-17"), as.Date("2020-05-14")))
NationalParksOpen <- master %>% filter(between(date, as.Date("2020-05-26"), as.Date("2020-06-22")))
ParksDates <- rbind(NationalParksClosed, NationalParksOpen) %>% filter(county == "Park" | county == "Teton")
TetonNationalPark <- ParksDates %>% filter(county == "Teton")
TetonNationalPark$open <- rep(c("FALSE", "TRUE"),c(28,28))
YellowstoneNationalPark <- ParksDates %>% filter(county == "Park")
YellowstoneNationalPark$open <- rep(c("FALSE", "TRUE"),c(28,28))
TetonNationalPark %>% summarize(a=n(),mean = mean(new_cases), std_dev = sd(new_cases))
null_distribution <- TetonNationalPark %>% specify(formula = new_cases ~ open) %>% hypothesise(null = "independence" ) %>% generate(reps= 1000, type = "permute") %>% calculate(stat = "diff in means", order = c("FALSE", "TRUE"))
obs_diff_means <- TetonNationalPark %>% specify(formula = new_cases ~ open) %>% calculate(stat = "diff in means", order = c("FALSE", "TRUE"))
visualise(null_distribution, bins = 10) + shade_p_value(obs_stat = obs_diff_means, direction = "both") + labs(title="Null Distribution for Difference in Means of New Cases in Teton", x="New Cases")
null_distribution %>% get_p_value(obs_stat = obs_diff_means, direction = "both")
YellowstoneNationalPark %>% summarize(a=n(),mean = mean(new_cases), std_dev = sd(new_cases))
null_distribution1 <- YellowstoneNationalPark %>% specify(formula = new_cases ~ open) %>% hypothesise(null = "independence" ) %>% generate(reps= 1000, type = "permute") %>% calculate(stat = "diff in means", order = c("FALSE", "TRUE"))
obs_diff_means1 <- YellowstoneNationalPark %>% specify(formula = new_cases ~ open) %>% calculate(stat = "diff in means", order = c("FALSE", "TRUE"))
visualise(null_distribution1, bins = 10) + shade_p_value(obs_stat = obs_diff_means, direction = "both") + labs(title="Null Distribution for Difference in Means of New Cases in Park County", x="New Cases")
null_distribution1 %>% get_p_value(obs_stat = obs_diff_means1, direction = "both")
observed_slope1 <- master1 %>%
specify(deathsPer10000 ~ non_white) %>%
calculate(stat = "slope")
observed_slope2 <- master1 %>%
specify(deathsPer10000 ~ IncomePerCap) %>%
calculate(stat = "slope")
observed_slope3 <- master1 %>%
specify(deathsPer10000 ~ WorkAtHome) %>%
calculate(stat = "slope")
se_ci1 <- bootstrap_slope_NonWhite %>%
get_ci(level = 0.95, type = "se", point_estimate = observed_slope1)
se_ci2 <- bootstrap_slope_Income %>%
get_ci(level = 0.95, type = "se", point_estimate = observed_slope2)
se_ci3 <- bootstrap_slope_WorkAtHome %>%
get_ci(level = 0.95, type = "se", point_estimate = observed_slope3)
bootstrap_slope_NonWhite <- master1 %>%
specify(formula = deathsPer10000 ~ non_white) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "slope")
visualize(bootstrap_slope_NonWhite) + labs(x="% Non White", y="Count", title="Bootstrap Distribution for Non White Coefficient") + shade_confidence_interval(endpoints = se_ci1, fill = NULL, linetype = "dashed", color = "grey60")
bootstrap_slope_Income <- master1 %>%
specify(formula = deathsPer10000 ~ IncomePerCap) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "slope")
visualize(bootstrap_slope_Income) + labs(x="Income Per Capita", y="Count", title="Bootstrap Distribution for Income Per Capita Coefficient") + shade_confidence_interval(endpoints = se_ci2, fill = NULL, linetype = "dashed", color = "grey60")
bootstrap_slope_WorkAtHome <- master1 %>%
specify(formula = deathsPer10000 ~ WorkAtHome) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "slope")
visualize(bootstrap_slope_WorkAtHome) + labs(x="% Work From Home", y="Count", title="Bootstrap Distribution for Work At Home Coefficient") + shade_confidence_interval(endpoints = se_ci3, fill = NULL, linetype = "dashed", color = "grey60")
master1 <- master1 %>% mutate(populous_county = as.numeric(populous_county))
plot_usmap("counties", data=master1, include = c("WY"), labels = TRUE, label_color = "white", values="populous_county") +
scale_fill_continuous(name = "Income Per Capita", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "Wyoming", subtitle = "Wyoming Income Per Capita by County", values="values")
View(HIST.non_drive)
master1 <- master1 %>% mutate(populous_county = as.numeric(populous_county))
plot_usmap("counties", data=master1, include = c("WY"), labels = TRUE, label_color = "white", values="populous_county") +
scale_fill_continuous(name = "Populous", label = scales::comma) +
labs(title = "Wyoming", subtitle = "Wyoming Population > 20,000 by County", values="values")
master1 <- master1 %>% mutate(populous_county = as.numeric(populous_county))
plot_usmap("counties", data=master1, include = c("WY"), labels = TRUE, label_color = "white", values="populous_county") +
labs(title = "Wyoming", subtitle = "Wyoming Population > 20,000 by County", values="values")
master1 <- master1 %>% mutate(populous_county = as.numeric(populous_county))
plot_usmap("counties", data=master1, include = c("WY"), labels = TRUE, label_color = "white", values="populous_county", show.legend = FALSE) +
labs(title = "Wyoming", subtitle = "Wyoming Population > 20,000 by County", values="values")
library(NHANES)
library("NHANES")
install.packages("NHANES")
library("NHANES")
data(NHANES)
force(NHANES)
View(NHANES)
?NHANES
sum(!is.na(NHANES$Age) & !is.na(NHANES$Race1) & !is.na(NHANES$HHIncomeMid))
library("NHANES")
library("dplyr")
data(NHANES)
NHANES %>% ggplot(aes(x=Age, y=HHIncomeMid)) + geom_point()
NHANES %>% ggplot(aes(x=Age, y=HHIncomeMid)) + geom_point()
NHANES %>% ggplot(aes(x=Age, y=HHIncomeMid)) + geom_point()
NHANES %>% ggplot(aes(x=Age, y=HHIncomeMid)) + geom_point()
library("NHANES")
library("dplyr")
library("ggplot2")
NHANES %>% ggplot(aes(x=Age, y=HHIncomeMid)) + geom_point()
NHANES %>% ggplot(aes(x=Age, y=HHIncomeMid)) + geom_box()
NHANES %>% ggplot(aes(x=Age, y=HHIncomeMid)) + geom_boxplot()
NHANES %>% ggplot(aes(x=Age, y=HHIncomeMid)) + geom_point()
NHANES %>% ggplot(aes(x=Weight, y=HHIncomeMid)) + geom_point()
NHANES %>% ggplot(aes(x=Weight, y=HHIncomeMid)) + geom_point() + scale_x_continuous()
NHANES %>% ggplot(aes(x=Weight, y=HHIncomeMid)) + geom_point() + scale_y_continuous()
NHANES %>% ggplot(aes(x=Weight, y=HHIncomeMid)) + geom_point() + scale_y_log10()
NHANES %>% ggplot(aes(x=Race1, y=HHIncomeMid)) + geom_boxplot() + scale_y_log10()
NHANES %>% ggplot(aes(x=Education, y=HHIncomeMid)) + geom_boxplot() + scale_y_log10()
model <- NHANES %>% lm(HHIncomeMid ~ Education + Race1 + Weight)
model <- lm(HHIncomeMid ~ Education + Race1 + Weight, data = NHANES)
model
model <- lm(HHIncomeMid ~ Weight + Race1 + Education, data = NHANES)
model
library("NHANES")
library("dplyr")
library("ggplot2")
library("tidyverse")
model <- lm(HHIncomeMid ~ Weight + Race1 + Education, data = NHANES)
model
lm(HHIncomeMid ~ Weight + Race1 + Education, data = NHANES)
NHANES %>% ggplot(aes(x=Education, y=HHIncomeMid)) + geom_boxplot() + scale_y_log10()
NHANES %>% ggplot(aes(x=Education, y=HHIncomeMid)) + geom_boxplot()
NHANES %>% ggplot(aes(x=Education, y=HHIncomeMid)) + geom_boxplot() + scale_y_log10()
NHANES %>% ggplot(aes(x=Weight, y=HHIncomeMid)) + geom_point()
unique(NHANES$HHIncomeMid)
unique(NHANES$Poverty)
NHANES %>% ggplot(aes(x=Weight, y=Poverty)) + geom_point()
NHANES %>% ggplot(aes(x=Race1, y=Poverty)) + geom_boxplot() + scale_y_log10()
NHANES %>% ggplot(aes(x=Race1, y=Poverty)) + geom_boxplot()
NHANES %>% ggplot(aes(x=Education, y=Poverty)) + geom_boxplot()
lm(Poverty ~ Weight + Race1 + Education, data = NHANES)
NHANES %>% ggplot(aes(x=Weight, y=Poverty)) + geom_point() + geom_abline()
NHANES %>% ggplot(aes(x=Weight, y=Poverty)) + geom_point() + geom_smooth()
NHANES %>% ggplot(aes(x=Weight)) + geom_histogram()
NHANES %>% ggplot(aes(x=Race1)) + geom_histogram()
NHANES %>% ggplot(aes(x=Race1)) + geom_bar()
NHANES %>% ggplot(aes(x=Poverty)) + geom_histogram()
NHANES %>% ggplot(aes(x=Education)) + geom_bar()
NHANES %>% ggplot(aes(x=Education, y=Poverty)) + geom_boxplot() + geom_abline()
NHANES %>% ggplot(aes(x=Race1, y=Poverty)) + geom_boxplot() + geom_abline()
NHANES %>% ggplot(aes(x=Race1, y=Poverty)) + geom_boxplot() + geom_smooth()
NHANES %>% ggplot(aes(x=Race1, y=Poverty)) + geom_boxplot() + geom_abline()
NHANES %>% ggplot(aes(x=Weight, y=Poverty)) + geom_point() + geom_abline()
NHANES %>% ggplot(aes(x=Race1, y=Poverty)) + geom_boxplot() + geom_abline()
NHANES %>% ggplot(aes(x=Race1, y=Poverty, color=Education)) + geom_boxplot() + geom_abline()
NHANES %>% ggplot(aes(x=Race1, y=Poverty, color=Education)) + geom_point() + geom_abline()
county.df <- read.csv("acs2017_county_data.csv")
county.df <- county.df %>% select(State, TotalPop, Men, Women, Hispanic, White, Black, Native, Asian, Pacific, Income, Poverty, Drive, Carpool, Transit, Walk, WorkAtHome, MeanCommute, Unemployment) %>% mutate(state = State) %>% mutate()
View(county.df)
county.df <- read.csv("acs2017_county_data.csv")
county.df <- county.df %>% select(State, TotalPop, Men, Women, Hispanic, White, Black, Native, Asian, Pacific, Income, Poverty, Drive, Carpool, Transit, Walk, WorkAtHome, MeanCommute, Unemployment) %>% mutate(state = State) %>% mutate(Hispanic1 = (.01 * Hispanic * TotalPop))
library(dplyr)
library(tidyverse)
library(usmap)
county.df <- read.csv("acs2017_county_data.csv")
county.df <- county.df %>% select(State, TotalPop, Men, Women, Hispanic, White, Black, Native, Asian, Pacific, Income, Poverty, Drive, Carpool, Transit, Walk, WorkAtHome, MeanCommute, Unemployment) %>% mutate(state = State) %>% mutate(Hispanic1 = (.01 * Hispanic * TotalPop))
.027*55036
county.df <- read.csv("acs2017_county_data.csv")
county.df <- county.df %>% select(State, TotalPop, Men, Women, Hispanic, White, Black, Native, Asian, Pacific, Income, Poverty, Drive, Carpool, Transit, Walk, WorkAtHome, MeanCommute, Unemployment) %>% mutate(state = State) %>% mutate(Hispanic = (.01 * Hispanic * TotalPop), White = (.01 * White * TotalPop), Black = (.01 * Black * TotalPop), Native = (.01 * Native * TotalPop), Asian = (.01 * Asian * TotalPop), Pacific = (.01 * Pacific * TotalPop), Poverty = (.01 * Poverty * TotalPop), Drive = (.01 * Drive * TotalPop), Carpool = (.01 * Carpool * TotalPop), Transit = (.01 * Transit * TotalPop), Walk = (.01 * Walk * TotalPop), WorkAtHome = (.01 * WorkAtHome * TotalPop), Unemployment = (.01 * Unemployment * TotalPop),)
state.df <- county.df %>% group_by(State) %>% mutate(TotalPop = sum(TotalPop), Men = sum(Men), Women = sum(Women), Income = mean(Income), Hispanic = sum(Hispanic), White = sum(White), Black = sum(Black), Native = sum(Native), Asian = sum(Asian), Pacific = sum(Pacific), Poverty = sum(Poverty), Drive = sum(Drive), Carpool = sum(Carpool), Transit = sum(Transit), Walk = sum(Walk), WorkAtHome = sum(WorkAtHome), MeanCommute = mean(MeanCommute), Unemployment = sum(Unemployment)) %>% distinct()
View(state.df)
county.df <- read.csv("acs2017_county_data.csv")
county.df <- county.df %>% mutate(state = State) %>% select(state, TotalPop, Men, Women, Hispanic, White, Black, Native, Asian, Pacific, Income, Poverty, Drive, Carpool, Transit, Walk, WorkAtHome, MeanCommute, Unemployment) %>% mutate(Hispanic = (.01 * Hispanic * TotalPop), White = (.01 * White * TotalPop), Black = (.01 * Black * TotalPop), Native = (.01 * Native * TotalPop), Asian = (.01 * Asian * TotalPop), Pacific = (.01 * Pacific * TotalPop), Poverty = (.01 * Poverty * TotalPop), Drive = (.01 * Drive * TotalPop), Carpool = (.01 * Carpool * TotalPop), Transit = (.01 * Transit * TotalPop), Walk = (.01 * Walk * TotalPop), WorkAtHome = (.01 * WorkAtHome * TotalPop), Unemployment = (.01 * Unemployment * TotalPop),)
state.df <- county.df %>% group_by(State) %>% mutate(TotalPop = sum(TotalPop), Men = sum(Men), Women = sum(Women), Income = mean(Income), Hispanic = sum(Hispanic), White = sum(White), Black = sum(Black), Native = sum(Native), Asian = sum(Asian), Pacific = sum(Pacific), Poverty = sum(Poverty), Drive = sum(Drive), Carpool = sum(Carpool), Transit = sum(Transit), Walk = sum(Walk), WorkAtHome = sum(WorkAtHome), MeanCommute = mean(MeanCommute), Unemployment = sum(Unemployment)) %>% distinct()
state.df <- county.df %>% group_by(state) %>% mutate(TotalPop = sum(TotalPop), Men = sum(Men), Women = sum(Women), Income = mean(Income), Hispanic = sum(Hispanic), White = sum(White), Black = sum(Black), Native = sum(Native), Asian = sum(Asian), Pacific = sum(Pacific), Poverty = sum(Poverty), Drive = sum(Drive), Carpool = sum(Carpool), Transit = sum(Transit), Walk = sum(Walk), WorkAtHome = sum(WorkAtHome), MeanCommute = mean(MeanCommute), Unemployment = sum(Unemployment)) %>% distinct()
View(state.df)
plot_usmap("states", data=state.df,, labels = TRUE, label_color = "white", values="Income") +
scale_fill_continuous(name = "Average Income", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "Average Income by State", values="values")
plot_usmap("states", data=state.df,, labels = TRUE, label_color = "white", values="Transit") +
scale_fill_continuous(name = "% Use Transit", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "% Use Transit by State", values="values")
plot_usmap("states", data=state.df,, labels = TRUE, label_color = "white", values="Carpool") +
scale_fill_continuous(name = "% Carpool", label = scales::comma) +
theme(legend.position = "right") +
labs(title = "% Carpool by State", values="values")
env.df <- read.csv("data/World_countries_env_vars.csv")
econ.df <- read.csv("data/country_profile_variables.csv")
spotify.df <- read.csv("data/top50contry.csv")
plotcp(fit1)
library(tidyverse)
library(readxl)
library(ggplot2)
library(dplyr)
library(httr)
library(spotifyr)
library(magrittr)
library(knitr)
library(jsonlite)
library(spotifyr)
library(lubridate)
library(ggridges)
library(R.utils)
library(countrycode)
library(rpart)
library(tree)
library(kableExtra)
library(forcats)
env.df <- read.csv("data/World_countries_env_vars.csv")
econ.df <- read.csv("data/country_profile_variables.csv")
spotify.df <- read.csv("data/top50contry.csv")
#select important vars
env.df <- env.df %>% select(Country, cloudiness, temp_max_warmestMonth, temp_min_coldestMonth, temp_mean_annual, temp_annual_range, rain_mean_annual)
econ.df <- econ.df %>% select(country, Region, Surface.area..km2., Population.in.thousands..2017., Population.density..per.km2..2017., GDP..Gross.domestic.product..million.current.US.., GDP.per.capita..current.US.., Urban.population....of.total.population.)
#rename columns to more readable names
colnames(econ.df) <- c("Country", "Region", "Surf_Area_km", "Pop_thou", "Pop_dens_km", "GDP", "GDP_per_cap", "Urban_pop")
#remove na values for more complete dataset
env.df <- env.df %>% na.omit
econ.df <- econ.df %>% na.omit
spotify.df <- spotify.df %>% na.omit
#fix names so we can join datasets
spotify.df <- spotify.df %>% rename("Country" = "country")
spotify.df$Country <-capitalize(spotify.df$Country)
econ.df$Country[econ.df$Country == "United States of America"] <- "United States"
env.df$Country[env.df$Country == "United States of America"] <- "United States"
#join datasets to master
env_spot <- left_join(spotify.df, env.df)
master <- left_join(env_spot, econ.df) %>% na.omit()
continent_map <- data.frame(
Country = c("Argentina", "Australia", "Belgium", "Brazil", "Canada", "Germany", "Colombia", "Chile", "Spain", "France", "India", "Indonesia", "Israel", "Italy", "Japan"),
Continent = c("South_America", "Oceania", "Europe", "South_America", "North_America", "Europe", "South_America", "South_America", "Europe", "Europe", "Asia", "Asia", "Asia", "Europe", "Asia")
)
# Join the continent mapping with the master data frame
master <- master %>% left_join(continent_map, by = "Country")
master$Country <- as.factor(master$Country)
master$Continent <- as.factor(master$Continent)
master <- master[,-c(27,28)]
master <- master[,-c(1,5,6,24)]
master$title <- as.factor(master$title)
master$artist <- as.factor(master$artist)
master$top.genre <- as.factor(master$top.genre)
master$Country <- as.factor(master$Country)
master$Surf_Area_km <- as.integer(master$Surf_Area_km)
master <- master %>% mutate(pop_dens = (Pop_thou * 1000)/Surf_Area_km)
master <- master %>% select(-c('artist','bpm','nrgy','dnce','dB','live','dur','acous','spch','pop', 'Surf_Area_km', 'Pop_thou', 'temp_annual_range'))
unique_countries <- master %>% distinct(Country, Continent) %>% group_by(Continent) %>% summarize(unique_countries = n())
kable(unique_countries, col.names = c("Continent", "Countries"), caption = "Number of Unique Countries Per Continent")
temp_max_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=temp_max_warmestMonth)) + geom_boxplot() + labs(x = "Continent", y = "Max Temperature in Warmest Month (C)", caption = "Figure 1: Max Temperature in Warmest Month by Continent")
temp_by_continent + theme(plot.caption = element_text(hjust = 0.5))
library(tidyverse)
library(readxl)
library(ggplot2)
library(dplyr)
library(httr)
library(spotifyr)
library(magrittr)
library(knitr)
library(jsonlite)
library(spotifyr)
library(lubridate)
library(ggridges)
library(R.utils)
library(countrycode)
library(rpart)
library(tree)
library(kableExtra)
library(forcats)
env.df <- read.csv("data/World_countries_env_vars.csv")
econ.df <- read.csv("data/country_profile_variables.csv")
spotify.df <- read.csv("data/top50contry.csv")
#select important vars
env.df <- env.df %>% select(Country, cloudiness, temp_max_warmestMonth, temp_min_coldestMonth, temp_mean_annual, temp_annual_range, rain_mean_annual)
econ.df <- econ.df %>% select(country, Region, Surface.area..km2., Population.in.thousands..2017., Population.density..per.km2..2017., GDP..Gross.domestic.product..million.current.US.., GDP.per.capita..current.US.., Urban.population....of.total.population.)
#rename columns to more readable names
colnames(econ.df) <- c("Country", "Region", "Surf_Area_km", "Pop_thou", "Pop_dens_km", "GDP", "GDP_per_cap", "Urban_pop")
#remove na values for more complete dataset
env.df <- env.df %>% na.omit
econ.df <- econ.df %>% na.omit
spotify.df <- spotify.df %>% na.omit
#fix names so we can join datasets
spotify.df <- spotify.df %>% rename("Country" = "country")
spotify.df$Country <-capitalize(spotify.df$Country)
econ.df$Country[econ.df$Country == "United States of America"] <- "United States"
env.df$Country[env.df$Country == "United States of America"] <- "United States"
#join datasets to master
env_spot <- left_join(spotify.df, env.df)
master <- left_join(env_spot, econ.df) %>% na.omit()
continent_map <- data.frame(
Country = c("Argentina", "Australia", "Belgium", "Brazil", "Canada", "Germany", "Colombia", "Chile", "Spain", "France", "India", "Indonesia", "Israel", "Italy", "Japan"),
Continent = c("South_America", "Oceania", "Europe", "South_America", "North_America", "Europe", "South_America", "South_America", "Europe", "Europe", "Asia", "Asia", "Asia", "Europe", "Asia")
)
# Join the continent mapping with the master data frame
master <- master %>% left_join(continent_map, by = "Country")
master$Country <- as.factor(master$Country)
master$Continent <- as.factor(master$Continent)
master <- master[,-c(27,28)]
master <- master[,-c(1,5,6,24)]
master$title <- as.factor(master$title)
master$artist <- as.factor(master$artist)
master$top.genre <- as.factor(master$top.genre)
master$Country <- as.factor(master$Country)
master$Surf_Area_km <- as.integer(master$Surf_Area_km)
master <- master %>% mutate(pop_dens = (Pop_thou * 1000)/Surf_Area_km)
master <- master %>% select(-c('artist','bpm','nrgy','dnce','dB','live','dur','acous','spch','pop', 'Surf_Area_km', 'Pop_thou', 'temp_annual_range'))
unique_countries <- master %>% distinct(Country, Continent) %>% group_by(Continent) %>% summarize(unique_countries = n())
kable(unique_countries, col.names = c("Continent", "Countries"), caption = "Number of Unique Countries Per Continent")
temp_max_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=temp_max_warmestMonth)) + geom_boxplot() + labs(x = "Continent", y = "Max Temperature in Warmest Month (C)", caption = "Figure 1: Max Temperature in Warmest Month by Continent")
temp_max_by_continent + theme(plot.caption = element_text(hjust = 0.5))
rain_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=rain_mean_annual)) + geom_boxplot() + labs(x = "Continent", y = "Mean Annual Rainfall (mm)", caption = "Figure 2: Average Rainfall by Continent") + ggtitle("")
rain_by_continent + theme(plot.caption = element_text(hjust = 0.5))
cloudiness_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=cloudiness)) + geom_boxplot() + labs(x = "Continent", y = "Cloudiness", caption = "Figure 3: Cloudiness by Continent")
cloudiness_by_continent + theme(plot.caption = element_text(hjust = 0.5))
#Charts for important economic variables such as GDP per capita, population density, and urban community percentage.
GDP_per_cap_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=GDP_per_cap)) + geom_col(fill = "mediumaquamarine") + labs(x = "Continent", y = "GDP Per Capita", caption = "Figure 4: GDP Per Capita by Continent")
GDP_per_cap_by_continent + theme(plot.caption = element_text(hjust = 0.5))
urban_pop_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=Urban_pop)) + geom_boxplot() + labs(x = "Continent", y = "Urban Population", caption = "Figure 5: Urban Population by Continent")
urban_pop_by_continent + theme(plot.caption = element_text(hjust = 0.5))
pop_density_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=pop_dens)) + geom_boxplot() + labs(x = "Continent", y = "Population Density", caption = "Figure 6: Population Density by Continent")
pop_density_by_continent + theme(plot.caption = element_text(hjust = 0.5))
initial_regress <- lm(val ~ cloudiness + temp_mean_annual + rain_mean_annual + pop_dens + GDP_per_cap + Urban_pop + temp_max_warmestMonth + temp_min_coldestMonth, master)
summary(initial_regress)
back_step <- initial_regress %>% step(val ~ cloudiness + temp_mean_annual + rain_mean_annual + pop_dens + GDP_per_cap + Urban_pop + temp_max_warmestMonth + temp_min_coldestMonth, direction = 'backward')
back_step
summary(back_step)
fit1 <- rpart(val ~ cloudiness + temp_mean_annual + rain_mean_annual + pop_dens + GDP_per_cap + Urban_pop + temp_max_warmestMonth + temp_min_coldestMonth, method="anova", data=master)
plot(fit1, uniform=TRUE, caption = "Figure 7: ")
text(fit1, use.n=TRUE, all=TRUE, cex=.8)
title("Figure 7: Decision Tree ")
plotcp(fit1)
fit1$cptable
fit2 <- rpart(val ~ cloudiness + rain_mean_annual + pop_dens + Urban_pop + temp_max_warmestMonth + GDP_per_cap, method="anova", data=master)
plot(fit2, uniform=TRUE, caption = "Figure 7: ")
text(fit2, use.n=TRUE, all=TRUE, cex=.8)
title("Figure 7: Decision Tree ")
plotcp(fit2)
fit2$cptable
setwd("C:/Users/caspi/OneDrive/Desktop/Umass/Soph Sem 2/Info248/final project")
View(master)
library(tidyverse)
library(readxl)
library(ggplot2)
library(dplyr)
library(httr)
library(spotifyr)
library(magrittr)
library(knitr)
library(jsonlite)
library(spotifyr)
library(lubridate)
library(ggridges)
library(R.utils)
library(countrycode)
library(rpart)
library(tree)
library(kableExtra)
library(forcats)
env.df <- read.csv("data/World_countries_env_vars.csv")
econ.df <- read.csv("data/country_profile_variables.csv")
spotify.df <- read.csv("data/top50contry.csv")
#select important vars
env.df <- env.df %>% select(Country, cloudiness, temp_max_warmestMonth, temp_min_coldestMonth, temp_mean_annual, temp_annual_range, rain_mean_annual)
econ.df <- econ.df %>% select(country, Region, Surface.area..km2., Population.in.thousands..2017., Population.density..per.km2..2017., GDP..Gross.domestic.product..million.current.US.., GDP.per.capita..current.US.., Urban.population....of.total.population.)
#rename columns to more readable names
colnames(econ.df) <- c("Country", "Region", "Surf_Area_km", "Pop_thou", "Pop_dens_km", "GDP", "GDP_per_cap", "Urban_pop")
#remove na values for more complete dataset
env.df <- env.df %>% na.omit
econ.df <- econ.df %>% na.omit
spotify.df <- spotify.df %>% na.omit
#fix names so we can join datasets
spotify.df <- spotify.df %>% rename("Country" = "country")
spotify.df$Country <-capitalize(spotify.df$Country)
econ.df$Country[econ.df$Country == "United States of America"] <- "United States"
env.df$Country[env.df$Country == "United States of America"] <- "United States"
#join datasets to master
env_spot <- left_join(spotify.df, env.df)
master <- left_join(env_spot, econ.df) %>% na.omit()
continent_map <- data.frame(
Country = c("Argentina", "Australia", "Belgium", "Brazil", "Canada", "Germany", "Colombia", "Chile", "Spain", "France", "India", "Indonesia", "Israel", "Italy", "Japan"),
Continent = c("South_America", "Oceania", "Europe", "South_America", "North_America", "Europe", "South_America", "South_America", "Europe", "Europe", "Asia", "Asia", "Asia", "Europe", "Asia")
)
# Join the continent mapping with the master data frame
master <- master %>% left_join(continent_map, by = "Country")
master$Country <- as.factor(master$Country)
master$Continent <- as.factor(master$Continent)
master <- master[,-c(27,28)]
master <- master[,-c(1,5,6,24)]
master$title <- as.factor(master$title)
master$artist <- as.factor(master$artist)
master$top.genre <- as.factor(master$top.genre)
master$Country <- as.factor(master$Country)
master$Surf_Area_km <- as.integer(master$Surf_Area_km)
master <- master %>% mutate(pop_dens = (Pop_thou * 1000)/Surf_Area_km)
master <- master %>% select(-c('artist','bpm','nrgy','dnce','dB','live','dur','acous','spch','pop', 'Surf_Area_km', 'Pop_thou', 'temp_annual_range'))
unique_countries <- master %>% distinct(Country, Continent) %>% group_by(Continent) %>% summarize(unique_countries = n())
kable(unique_countries, col.names = c("Continent", "Countries"), caption = "Number of Unique Countries Per Continent")
temp_max_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=temp_max_warmestMonth)) + geom_boxplot() + labs(x = "Continent", y = "Max Temperature in Warmest Month (C)", caption = "Figure 1: Max Temperature in Warmest Month by Continent")
temp_max_by_continent + theme(plot.caption = element_text(hjust = 0.5))
rain_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=rain_mean_annual)) + geom_boxplot() + labs(x = "Continent", y = "Mean Annual Rainfall (mm)", caption = "Figure 2: Average Rainfall by Continent") + ggtitle("")
rain_by_continent + theme(plot.caption = element_text(hjust = 0.5))
cloudiness_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=cloudiness)) + geom_boxplot() + labs(x = "Continent", y = "Cloudiness", caption = "Figure 3: Cloudiness by Continent")
cloudiness_by_continent + theme(plot.caption = element_text(hjust = 0.5))
#Charts for important economic variables such as GDP per capita, population density, and urban community percentage.
GDP_per_cap_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=GDP_per_cap)) + geom_col(fill = "mediumaquamarine") + labs(x = "Continent", y = "GDP Per Capita", caption = "Figure 4: GDP Per Capita by Continent")
GDP_per_cap_by_continent + theme(plot.caption = element_text(hjust = 0.5))
urban_pop_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=Urban_pop)) + geom_boxplot() + labs(x = "Continent", y = "Urban Population", caption = "Figure 5: Urban Population by Continent")
urban_pop_by_continent + theme(plot.caption = element_text(hjust = 0.5))
pop_density_by_continent <- master %>% group_by(Continent) %>% ggplot(aes(x=Continent,y=pop_dens)) + geom_boxplot() + labs(x = "Continent", y = "Population Density", caption = "Figure 6: Population Density by Continent")
pop_density_by_continent + theme(plot.caption = element_text(hjust = 0.5))
initial_regress <- lm(val ~ cloudiness + temp_mean_annual + rain_mean_annual + pop_dens + GDP_per_cap + Urban_pop + temp_max_warmestMonth + temp_min_coldestMonth, master)
summary(initial_regress)
back_step <- initial_regress %>% step(val ~ cloudiness + temp_mean_annual + rain_mean_annual + pop_dens + GDP_per_cap + Urban_pop + temp_max_warmestMonth + temp_min_coldestMonth, direction = 'backward')
back_step
summary(back_step)
fit1 <- rpart(val ~ cloudiness + temp_mean_annual + rain_mean_annual + pop_dens + GDP_per_cap + Urban_pop + temp_max_warmestMonth + temp_min_coldestMonth, method="anova", data=master)
plot(fit1, uniform=TRUE, caption = "Figure 7: ")
text(fit1, use.n=TRUE, all=TRUE, cex=.8)
title("Figure 7: Decision Tree ")
plotcp(fit1)
fit1$cptable
fit2 <- rpart(val ~ cloudiness + rain_mean_annual + pop_dens + Urban_pop + temp_max_warmestMonth + GDP_per_cap, method="anova", data=master)
plot(fit2, uniform=TRUE, caption = "Figure 7: ")
text(fit2, use.n=TRUE, all=TRUE, cex=.8)
title("Figure 7: Decision Tree ")
plotcp(fit2)
fit2$cptable
View(master)
